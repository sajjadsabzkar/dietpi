 mkimage -C none -A arm64 -T script -d /boot/boot.scr-txt /boot/boot.scr

# PART1 FAT  aml_autoscript loads u-boot.ext --> boot.scr 

echo "----------------------------------------"
echo "RUN BOOT SCRIPT part1 vfat boot.scr"
echo ""
sleep 2


# Default values
setenv rootdev "/dev/mmcblk0p2"
setenv rootfstype "ext4"
setenv consoleargs "console=tty1"
setenv verbosity "4"
setenv docker_optimizations "off"
setenv overlay_path "amlogic"
setenv overlay_prefix "meson"

# Load addresses
setenv load_addr "0x32000000"
setenv kernel_addr_r "0x34000000"
setenv fdt_addr_r "0x4080000"
setenv overlay_error "false"

# Load dietpiEnv.txt
# echo "devtype devnum prefix"
# echo "${devtype} ${devnum} ${prefix}"
# echo "------------------------------------"
##
#setenv devtype "mmc"
setenv devnum "0:2"
setenv prefix "/boot/"
##
echo "devtype devnum prefix"
echo "${devtype} ${devnum} ${prefix}"
echo "---------------------------------"
sleep 2

if test -e ${devtype} ${devnum} ${prefix}dietpiEnv.txt; then
	load ${devtype} ${devnum} ${load_addr} ${prefix}dietpiEnv.txt
	env import -t ${load_addr} ${filesize}
    #echo "IMPORT ENV "
    #sleep 10
fi

#echo "AFTER IMPORT"
echo "DTB USED: ${fdtfile}"
sleep 2

# Manuel set
# uuid
#setenv ubootpart "UUID=9f7481e8-1435-4365-87aa-b6782e1add1d"

#seten partuuid "UUID=b0f9b29d-7384-44f2-94e3-7b2ab1a4dc4a"
#setenv rootdev "UUID=b0f9b29d-7384-44f2-94e3-7b2ab1a4dc4a"


# partuuid
#setenv ubootpart "PARTUUID=83772041-01"
#setenv rootdev "PARTUUID=83772041-02"



# Print boot info
#echo "rootdev ${rootdev} ubootpart ${partuuid}"
echo "rootdev ${rootdev}"
sleep 2

# Define kernel command-line arguments
#setenv bootargs "root=${rootdev} rootfstype=${rootfstype} rootwait ${consoleargs} loglevel=${verbosity} consoleblank=0 coherent_pool=2M ubootpart=${partuuid} libata.force=noncq usb-storage.quirks=${usbstoragequirks} ${extraargs}"

setenv bootargs "root=${rootdev} rootfstype=${rootfstype} rootwait ${consoleargs} loglevel=${verbosity} consoleblank=0 coherent_pool=2M ubootpart=${rootdev} libata.force=noncq usb-storage.quirks=${usbstoragequirks} ${extraargs}"

# Manual set devtype devnum part
# LOAD from part 2 ext4

########
# echo " BOOT devtype ${devtype}   devnum ${devnum}" 
# setenv devtype "mmc"
# setenv devnum "0:2"
# echo " MANUEL devtype ${devtype}   devnum ${devnum}" 


# Load kernel, initramfs and device tree
#echo "Load kernel, initramfs and device tree"
#echo " ${devtype} ${devnum} ${kernel_addr_r} ${prefix}Image"
#echo " ${devtype} ${devnum} ${ramdisk_addr_r} ${prefix}uInitrd"
#echo " ${devtype} ${devnum} ${fdt_addr_r} ${prefix}dtb/${fdtfile}"

load ${devtype} ${devnum} ${kernel_addr_r} /boot/Image
load ${devtype} ${devnum} ${ramdisk_addr_r} /boot/uInitrd
load ${devtype} ${devnum} ${fdt_addr_r} /boot/dtb/${fdtfile}
fdt addr ${fdt_addr_r}


echo "BOOTING Dietpi"
sleep 10

# Boot
booti ${kernel_addr_r} ${ramdisk_addr_r} ${fdt_addr_r}


#sysboot usb 0:2 any 0x1080000 /boot/extlinux/extlinux.conf
# use: mkimage -A arm64 -T script -O linux -d boot.cmd boot.scr

# https://elinux.org/ECE497_Project:_Multiple_Partitions_via_U-boot
#U-boot # mmc part
#U-boot # setenv pnum X
#U-boot # setenv mmcroot /dev/mmcblk0pX rw
#U-boot # setenv loaduimage ext2load mmc 0:X ${loadaddr} /boot/uImage
#U-boot # boot


# If you set the boot flag on the second partition

# https://forum.armbian.com/topic/12205-u-boot-question-boot-2nd-partition/
#   setenv partnum "2"
#   setenv devnum "${devnum}:${partnum}" 

# Env DEV PART 
# https://u-boot.readthedocs.io/en/latest/usage/partitions.html
# !!! Usefule info setting ENVIROMENT PAR FOR BOOTING
# Change part
